<style>
  #userMeta > span {
    word-break: break-word;
    word-wrap: break-word;
  }
  .pill {
    border-radius: 5px;
    /* background-color: rgb(203, 203, 203); */
    overflow: hidden;
    gap: 2 !important;
  }

  .pill__label {
    text-align: center;
    padding: 7px 0px 5px 5px;
    min-width: 100px;
  }

  .pill__count {
    background-color: black;
    color: white;
    min-width: 25px;
    text-align: center;
    padding: 7px 5px 5px;
  }

  .pill_large__label {
    text-align: center;
    padding: 5px 10px;
    min-width: 100px;
  }

  .pill_large__count {
    background-color: black;
    color: white;
    text-align: center;
    padding: 5px 0;
    width: 100%;
  }

  .bookshelf {
    overflow: hidden;  
    flex-wrap: nowrap;
  }

  .book__image-wrapper {
    flex: 1 1 auto;
    min-width: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    height: 215px;
  }

  .book__image {
    display: block;
    width: auto;
    height: 100%;
    max-width: 100%;
    object-fit: contain;
    border-radius: 5px;
  }

  .rating-stars i {
    font-size: .8rem;
  }

  #bottomRow {
    height: 100%;
    align-items: center;
  }
</style>

{% template profile %}
  <div id="profile" class="flex flex--col">
    <div id="userInfo" class="flex flex--row flex--center gap--medium items--center stretch">
      <img class="image-dither h--24" style="border-radius: 10%;" src="{{ image }}">
      <div id="userMeta" class="grid grid--cols-1 gap--xsmall">
        <span id="profileName" class="value value--small">{{ name }}</span>
        <span id="bio" class="description clamp--4">{{ bio }}</span>
      </div>
    </div>

    <div id="followRelationships" class="flex flex--row flex--left w-full">
      {% render 'pill', label: "Following", count: followed_users_count %}
      {% render 'pill', label: "Followers", count: followers_count %}
    </div>
  </div>
{% endtemplate %}

{% template pill %}
  <div class="pill flex flex--row flex--right gap--[5px] stretch bg--gray-6">
    <span class="pill__label value value--xxsmall text-stroke stretch">{{ label }}</span>
    <span class="pill__count value value--xxsmall value--tnums" data-value-format="true">{{ count }}</span>
  </div>
{% endtemplate %}

{% template pill_large %}
  <div class="pill flex flex--col gap--[5px] bg--gray-6">
    <div class="pill_large__count">
      <span class="value value--small value--tnums" data-value-format="true">{{ count }}</span>
    </div>
    <span class="pill_large__label value value--xxsmall text-stroke">{{ label }}</span>
  </div>
{% endtemplate %}

{% template title_bar %}
  <div class="title_bar">
    <img id="logo" class="image image-stroke" style="transform: rotate(-12deg)"
      src="https://wp.hardcover.app/wp-content/uploads/2023/11/Symbol-Dark.png">
    <span class="title">Hardcover - {{ title }}</span>
    <span class="instance">@{{ username }}</span>
    {% for i in flair %}
    <span class="label label--small label--inverted">{{ i }}</span>
    {% endfor %}
  </div>
{% endtemplate %}

{% template goals %}
  <script src="https://code.highcharts.com/highcharts.js"></script>
  <div class="grid grid--cols-3">
    {% comment %} <span class="label col--span-2" data-pixel-perfect="true">Reading Goals</span> {% endcomment %}
    <!-- <span class="label col--span-1 col--end" id="ratingTotalLabel">2024</span> -->
    {% comment %} <div class="w--full b-h-gray-5 col--span-3"></div> {% endcomment %}
    <div id="progress" class="row row--start col--span-3 w-full" style=""></div>
  </div>
  <script type="text/javascript">
    var testData = {{ goals | json }}

    // Sort the testData array by the ratio of read to goal in descending order
    testData.sort((a, b) => (b.read / b.goal) - (a.read / a.goal));
    testData = testData.slice(0, 6); // Limit to top 6 items

    // Extract categories and data for Highcharts
    // categories are the titles of the goals
    const categories = testData.map(goal => goal.title);
    const data = testData.map(goal => ({
      // y: Math.min(Math.round((goal.read / goal.goal) * 100), 100),
      y: Math.min((goal.read / goal.goal) * 100),
      label: `${goal.read}/${goal.goal} books`
    }));


    // Initialize chart with bar/column configuration for 4 series
    Highcharts.chart('progress', {
      chart: {
        animation: false,
        type: 'bar',
        height: 200,
        spacing: [0, 0, 0, 0], // top, right, bottom, left
        renderTo: 'container',
      },
      title: {
        text: null
      },
      legend: {
        enabled: false
      },
      tooltip: {
        enabled: false // Disable hover tooltips
      },
      xAxis: {
        categories: categories,
        title: { text: null },
        labels: {
          style: {
            fontSize: '16px',
            fontWeight: 'bold',
            padding: 0
          }
        },
        lineWidth: 0
      },
      yAxis: {
        min: 0,
        max: 100,
        title: { text: 'Progress' },
        labels: { 
          format: '{value}%',
        },
        visible: false,
      },
      plotOptions: {
        series: {
          pointWidth: 30,
          animation: false,
          enableMouseTracking: false,
          states: {
            inactive: {
              opacity: 1 // Prevent dimming of other series on hover
            },
            hover: {
              enabled: false // Disable hover state styling
            }
          },
          stacking: 'normal',
          dataLabels: {
            enabled: true,
            useHTML: true,
            style: {
              fontSize: '16px',
            },
            formatter: function () {
              if (this.point.y === 0) {
                return `<span style="padding-left: 5px;">Not Yet Started</span>`;
              }
              const rounded = Math.round(this.y);
              return `<span class="text" data-pixel-perfect="true">${this.point.label} (${rounded}%)</span>`;
            }
          }
        }
      },
      series: [{
        name: 'Progress',
        color: '#000',
        data: data
      }],
      credits: {
        enabled: false
      },
      exporting: {
        enabled: false
      },
    });
  </script>
{% endtemplate %}

{% template bookshelf %}
    {% comment %} <span class="label col--span-2" data-pixel-perfect="true">{{ title }}</span> {% endcomment %}
    {% comment %} <div class="w--full b-h-gray-5 col--span-3"></div> {% endcomment %}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">

    <div class="bookshelf flex gap--space-between">
      {% for book in books limit:5 %}
        <div class="book">
          <div class="book__image-wrapper">
            <img src="{{ book.image }}" alt="{{ book.title }}" class="book__image image-dither">
          </div>

          {% if book.rating != nil and book.rating != '' %}
            <span class="book__rating stars flex flex--row flex--center-x">
              {% assign rating = book.rating | plus: 0 %}
              {% assign full_stars = rating | floor %}
              {% assign has_half = rating | modulo: 1 %}
              {% assign half_star = 0 %}
              {% if has_half >= 0.5 %}
                {% assign half_star = 1 %}
              {% endif %}
              {% assign empty_stars = 5 | minus: full_stars | minus: half_star %}

              <span class="rating-stars" data-pixel-perfect="true">
                {% for i in (1..full_stars) %}
                  <i class="fas fa-star"></i>
                {% endfor %}
                {% if half_star == 1 %}
                  <i class="fas fa-star-half-alt"></i>
                {% endif %}
                {% for i in (1..empty_stars) %}
                  <i class="far fa-star"></i>
                {% endfor %}
              </span>
            </span>
          {% endif %}
        </div>
      {% endfor %}
    </div>
{% endtemplate %}